{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"streamWithContinuation"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"elementType"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":".Type = Element.self, "},{"kind":"externalParam","text":"bufferingPolicy"},{"kind":"text","text":" "},{"kind":"internalParam","text":"limit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BufferingPolicy","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"kind":"text","text":" = .unbounded) -> (stream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">, continuation"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"elementType","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of element the "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" produces."}]}]},{"name":"limit","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A Continuation.BufferingPolicy value to set the stream’s buffering behavior. By"},{"type":"text","text":" "},{"type":"text","text":"default, the stream buffers an unlimited number of elements. You can also set the policy to"},{"type":"text","text":" "},{"type":"text","text":"buffer a specified number of oldest or newest elements."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is handy for immediately escaping the continuation from an async stream, which typically"},{"type":"text","text":" "},{"type":"text","text":"requires multiple steps:"}]},{"type":"codeListing","syntax":"swift","code":["var _continuation: AsyncStream<Int>.Continuation!","let stream = AsyncStream<Int> { continuation = $0 }","let continuation = _continuation!","","\/\/ vs.","","let (stream, continuation) = AsyncStream<Int>.streamWithContinuation()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This tool is usually used for tests where we need to supply an async sequence to a dependency"},{"type":"text","text":" "},{"type":"text","text":"endpoint and get access to its continuation so that we can emulate the dependency"},{"type":"text","text":" "},{"type":"text","text":"emitting data. For example, suppose you have a dependency exposing an async sequence for"},{"type":"text","text":" "},{"type":"text","text":"listening to notifications. To test this you can use "},{"type":"codeVoice","code":"streamWithContinuation"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let notifications = AsyncStream<Void>.streamWithContinuation()","","let store = TestStore(","  initialState: Feature.State(),","  reducer: Feature()",")","","store.dependencies.notifications = { notifications.stream }","","await store.send(.task)","notifications.continuation.yield(\"Hello\")  \/\/ Simulate notification being posted","await store.receive(.notification(\"Hello\")) {","  $0.message = \"Hello\"","}"]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"⚠️ "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" does not support multiple subscribers, therefore you can only use"},{"type":"text","text":" "},{"type":"text","text":"this helper to test features that do not subscribe multiple times to the dependency"},{"type":"text","text":" "},{"type":"text","text":"endpoint."}]}],"type":"aside","name":"Warning"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/streamwithcontinuation(_:bufferingpolicy:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/streamWithContinuation(_:bufferingPolicy:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Constructs and returns a stream along with its backing continuation."}],"kind":"symbol","metadata":{"role":"symbol","title":"streamWithContinuation(_:bufferingPolicy:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"streamWithContinuation"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"bufferingPolicy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BufferingPolicy","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"kind":"text","text":") -> (stream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">, continuation"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":")"}],"symbolKind":"method","externalID":"s:ScS22ComposableArchitectureE22streamWithContinuation_15bufferingPolicyScSyxG0C0_ScS0E0Vyx_G12continuationtxm_AG09BufferingG0Oyx__GtFZ","extendedModule":"_Concurrency","modules":[{"name":"ComposableArchitecture","relatedModules":["_Concurrency"]}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency":{"role":"collection","title":"_Concurrency","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_concurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream/streamWithContinuation(_:bufferingPolicy:)":{"role":"symbol","title":"streamWithContinuation(_:bufferingPolicy:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"streamWithContinuation"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"bufferingPolicy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BufferingPolicy","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"kind":"text","text":") -> (stream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">, continuation"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Constructs and returns a stream along with its backing continuation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/streamWithContinuation(_:bufferingPolicy:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/streamwithcontinuation(_:bufferingpolicy:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream":{"role":"symbol","title":"AsyncStream","fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncStream","preciseIdentifier":"s:ScS"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncStream"}],"url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"}}}