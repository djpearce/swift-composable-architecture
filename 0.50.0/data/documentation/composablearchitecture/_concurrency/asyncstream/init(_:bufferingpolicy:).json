{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"sequence"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"bufferingPolicy"},{"kind":"text","text":" "},{"kind":"internalParam","text":"limit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BufferingPolicy","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"kind":"text","text":" = .unbounded) "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"AsyncSequence","preciseIdentifier":"s:Sci"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"sequence","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"."}]}]},{"name":"limit","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of elements to hold in the buffer. By default, this value is"},{"type":"text","text":" "},{"type":"text","text":"unlimited. Use a "},{"type":"codeVoice","code":"Continuation.BufferingPolicy"},{"type":"text","text":" to buffer a specified number of oldest or"},{"type":"text","text":" "},{"type":"text","text":"newest elements."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful as a type eraser for live "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"-based dependencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, your feature may want to subscribe to screenshot notifications. You can model"},{"type":"text","text":" "},{"type":"text","text":"this as a dependency client that returns an "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct ScreenshotsClient {","  var screenshots: () -> AsyncStream<Void>","  func callAsFunction() -> AsyncStream<Void> { self.screenshots() }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The “live” implementation of the dependency can supply a stream by erasing the appropriate"},{"type":"text","text":" "},{"type":"codeVoice","code":"NotificationCenter.Notifications"},{"type":"text","text":" async sequence:"}]},{"type":"codeListing","syntax":"swift","code":["extension ScreenshotsClient {","  static let live = Self(","    screenshots: {","      AsyncStream(","        NotificationCenter.default","          .notifications(named: UIApplication.userDidTakeScreenshotNotification)","          .map { _ in }","      )","    }","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While your tests can use "},{"type":"codeVoice","code":"AsyncStream.streamWithContinuation"},{"type":"text","text":" to spin up a controllable stream"},{"type":"text","text":" "},{"type":"text","text":"for tests:"}]},{"type":"codeListing","syntax":"swift","code":["let screenshots = AsyncStream<Void>.streamWithContinuation()","","let store = TestStore(","  initialState: Feature.State(),","  reducer: Feature()",")","","store.dependencies.screenshots.screenshots = { screenshots.stream }","","screenshots.continuation.yield()  \/\/ Simulate a screenshot being taken.","","await store.receive(.screenshotTaken) { ... }"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/init(_:bufferingpolicy:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/init(_:bufferingPolicy:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Initializes an "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" from any "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"init(_:bufferingPolicy:)","roleHeading":"Initializer","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"bufferingPolicy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BufferingPolicy","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"kind":"text","text":")"}],"symbolKind":"init","externalID":"s:ScS22ComposableArchitectureE_15bufferingPolicyScSyxGqd___ScS12ContinuationV09BufferingD0Oyx__Gtc7ElementQyd__Rszs8SendableRd__SciRd__lufc","extendedModule":"_Concurrency","modules":[{"name":"ComposableArchitecture","relatedModules":["_Concurrency"]}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream/init(_:bufferingPolicy:)":{"role":"symbol","title":"init(_:bufferingPolicy:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"bufferingPolicy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:ScS12ContinuationV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BufferingPolicy","preciseIdentifier":"s:ScS12ContinuationV15BufferingPolicyO"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes an "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" from any "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/init(_:bufferingPolicy:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/init(_:bufferingpolicy:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream":{"role":"symbol","title":"AsyncStream","fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncStream","preciseIdentifier":"s:ScS"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncStream"}],"url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency":{"role":"collection","title":"_Concurrency","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_concurrency"}}}